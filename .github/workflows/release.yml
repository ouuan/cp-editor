name: "Release"

on:
  push:
    tags:
      - "*"

env:
  QT_VERSION: 5.15.2

jobs:
  release:
    name: "release on ${{ matrix.config.os }} with portable ${{ matrix.config.portable-option }}"
    runs-on: "${{ matrix.config.os }}"
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "ubuntu-16.04", portable-option: "Off" }
          - {
              os: "windows-latest",
              portable-option: "Off",
              portable-name: "-setup.exe",
            }
          - {
              os: "windows-latest",
              portable-option: "On",
              portable-name: "-portable.zip",
            }
          - { os: "macos-latest", portable-option: "Off" }

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Restore Qt from cache
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: Qt-${{ matrix.config.os }}-${{ env.QT_VERSION }}

      - name: Set up Qt environment
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: ${{ env.QT_VERSION }}

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPORTABLE_VERSION=${{ matrix.config.portable-option }}
          cmake --build . --config Release -j2

      - name: Get the version
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=VERSION::$VERSION
          read STABLE_VERSION < .ci/STABLE_VERSION
          if [ "${VERSION:0:${#STABLE_VERSION}}" == "$STABLE_VERSION" ]; then
            echo ::set-output name=ISBETA::false
          else
            echo ::set-output name=ISBETA::true
          fi

      - name: Pack to AppImage
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt install libxcb*
          cd build
          wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt*.AppImage
          export VERSION=${{ steps.get_version.outputs.VERSION }}
          cp ../.ci/linux/cpeditor.desktop default.desktop
          cp ../resources/icon.png cpeditor.png
          ./linuxdeployqt*.AppImage ./cpeditor -appimage -qmake=../../Qt/${{ env.QT_VERSION }}/gcc_64/bin/qmake
          mv CP_Editor-${{steps.get_version.outputs.VERSION }}-x86_64.AppImage cpeditor-${{ steps.get_version.outputs.VERSION }}-linux-x86_64.AppImage

      - name: Release AppImage
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: build/cpeditor-${{ steps.get_version.outputs.VERSION }}-linux-x86_64.AppImage
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pack to deb
        if: startsWith(matrix.config.os, 'ubuntu')
        id: deb-package
        run: |
          pkgname="cpeditor-${{ steps.get_version.outputs.VERSION }}-linux-amd64"
          echo "::set-output name=pkgname::${pkgname}"

          mkdir -p ${pkgname}/usr/share/
          cd ${pkgname}/usr/share/

          mkdir applications/  
          cp ${{ github.workspace }}/.ci/linux/cpeditor.desktop ./applications

          mkdir -p cpeditor/bin/
          cp ${{ github.workspace }}/.ci/DEB/cpeditor.sh ./cpeditor/
          cp -r ${{ github.workspace }}/build/plugins/ ./cpeditor
          cp ${{ github.workspace }}/build/cpeditor ./cpeditor/bin/

          mkdir -p doc/cpeditor/
          cp ${{ github.workspace }}/LICENSE ./doc/cpeditor/copyright

          mkdir icons/
          cp ${{ github.workspace }}/resources/icon.png ./icons/cpeditor.png

          cp -r ${{ github.workspace }}/build/translations/ ./cpeditor

          cd ../
          mkdir -p lib/cpeditor/
          cp ${{ github.workspace }}/build/lib/* ./lib/cpeditor

          cd ..
          cp -r ${{ github.workspace }}/.ci/DEB/DEBIAN .
          wget -c "http://archive.ubuntu.com/ubuntu/pool/universe/h/hashdeep/md5deep_4.4-4_all.deb"
          wget -c "http://archive.ubuntu.com/ubuntu/pool/universe/h/hashdeep/hashdeep_4.4-4_amd64.deb"
          sudo apt install ./*.deb
          rm *.deb
          md5deep -rl usr/ > ./DEBIAN/md5sums
          cd DEBIAN
          chmod 775 p*
          sed -i "s/\${ver}/${{ steps.get_version.outputs.VERSION }}/" control
          SIZE=$(du -s ../../${pkgname} | cut -f1)
          sed -i "s/\${size}/${SIZE}/" control

          cd ${{ github.workspace }}/
          fakeroot dpkg-deb --build ${pkgname}

      - name: Release deb
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: ${{ steps.deb-package.outputs.pkgname }}.deb
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package full Source
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          shopt -s extglob # enable "!(...)"
          mv .git/objects/pack .
          git unpack-objects < pack/*.pack
          rm -rf pack .git/objects/!($(git rev-parse @ | cut -c-2)) .git/objects/$(git rev-parse @ | cut -c-2)/!($(git rev-parse @ | cut -c3-))
          wget https://raw.githubusercontent.com/Kentzo/git-archive-all/master/git_archive_all.py
          python3 git_archive_all.py cpeditor-${{ steps.get_version.outputs.VERSION }}-full-source.tar.gz --extra=.git/HEAD --extra=.git/refs --extra=.git/objects

      - name: Release full source
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: cpeditor-${{ steps.get_version.outputs.VERSION }}-full-source.tar.gz
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pack to dmg on Mac
        if: startsWith(matrix.config.os, 'macos')
        run: |
          cd build
          ../../Qt/*/*/bin/macdeployqt cpeditor.app
          cp ../.ci/mac/cpeditor.icns cpeditor.app/Contents/Resources
          hdiutil create -volname cpeditor-${{ steps.get_version.outputs.VERSION }}-x64 -srcfolder cpeditor.app -ov -format UDZO cpeditor-${{ steps.get_version.outputs.VERSION }}-macos-x64.dmg

      - name: Release on Mac
        if: startsWith(matrix.config.os, 'macos')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: build/cpeditor-${{ steps.get_version.outputs.VERSION }}-macos-x64.dmg
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather dependencies on Windows
        if: startsWith(matrix.config.os, 'windows')
        shell: bash
        run: |
          mkdir build/out
          mv build/Release/cpeditor.exe build/out
          ../Qt/*/*/bin/windeployqt.exe build/out/cpeditor.exe --no-translations
          cd "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC"
          echo "VC_REDIST_VERSION=$(ls -dr *.* | head -n1)" >> $GITHUB_ENV

      - name: Pack to installer on Windows
        if: startsWith(matrix.config.os, 'windows') && matrix.config.portable-option == 'Off'
        shell: bash
        run: |
          mkdir build/out/Redist
          cp "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/$VC_REDIST_VERSION/vc_redist.x64.exe" build/out/Redist
          iscc .ci/win/win-setup.iss -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=$(pwd) -DMyOutRoot=$(pwd)/build/out -DVC_REDIST_VERSION=$VC_REDIST_VERSION
          mv cpeditor-${{ steps.get_version.outputs.VERSION }}-x64-setup.exe cpeditor-${{ steps.get_version.outputs.VERSION }}-windows-x64${{ matrix.config.portable-name }}

      - name: Pack to portable on Windows
        if: startsWith(matrix.config.os, 'windows') && matrix.config.portable-option == 'On'
        shell: bash
        run: |
          cp "C:/Program Files (x86)/Microsoft Visual Studio"/2019/Enterprise/VC/Redist/MSVC/$VC_REDIST_VERSION/x64/Microsoft.*.CRT/*.dll build/out
          cd build/out
          7z a ../../cpeditor-${{ steps.get_version.outputs.VERSION }}-windows-x64${{ matrix.config.portable-name }} ./*

      - name: Release on Windows
        if: startsWith(matrix.config.os, 'windows')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: cpeditor-${{ steps.get_version.outputs.VERSION }}-windows-x64${{ matrix.config.portable-name }}
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
