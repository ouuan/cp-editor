; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; Before running define these three variables is must.
; MyRootOut = directory where you ran windeployqt
; MyAppVersion = App Version
; MyProjectRoot = Source root
; Arch = x86 or x64
; Winlibs = true or false

#include "environment.iss"

#define MyAppName "CP Editor"
#define MyAppPublisher "Ashar Khan <coder3101>"
#define MyAppURL "https://github.com/cpeditor/cpeditor"
#define MyAppExeName "cpeditor.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{01D77782-3A40-44F0-BD36-59626998F4EE}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\cpeditor
DisableProgramGroupPage=yes
UsedUserAreasWarning=no
LicenseFile={#MyProjectRoot}\LICENSE
PrivilegesRequiredOverridesAllowed=dialog
OutputDir={#MyProjectRoot}
OutputBaseFilename=cpeditor-{#MyAppVersion}-{#Arch}-setup
SetupIconFile={#MyProjectRoot}\assets\icon.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ChangesEnvironment=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 6.1; Check: not IsAdminInstallMode

[Files]
Source: "{#MyOutRoot}\cpeditor.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyOutRoot}\bearer\*"; DestDir: "{app}\bearer\"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyOutRoot}\iconengines\*"; DestDir: "{app}\iconengines\"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyOutRoot}\imageformats\*"; DestDir: "{app}\imageformats\"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyOutRoot}\platforms\*"; DestDir: "{app}\platforms\"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyOutRoot}\styles\*"; DestDir: "{app}\styles\"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyOutRoot}\*.dll"; DestDir: "{app}"; Flags: ignoreversion

Source: "{#MyOutRoot}\mingw64\*"; DestDir: "{app}\mingw64\"; Check: isWinlibsIncluded; Flags: ignoreversion recursesubdirs createallsubdirs

; VC++ redistributable runtime. Extracted by VC2019RedistNeedsInstall(), if needed.
Source: "{#MyOutRoot}\Redist\vc_redist.{#Arch}.exe"; DestDir: {tmp}; Flags: dontcopy

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
Filename: "{tmp}\vc_redist.{#Arch}.exe"; StatusMsg: "Installing VC2019 redist..."; Parameters: "/quiet /norestart"; Check: VC2019RedistNeedsInstall ; Flags: waituntilterminated

[Code]
function VC2019RedistNeedsInstall: Boolean;
var
  Version: String;
  ExpectedVersion: String;
begin
  if (RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\VisualStudio\14.0\VC\Runtimes\{#Arch}', 'Version', Version)) then
  begin
    ExpectedVersion := 'v{#VC_REDIST_VERSION}.03'
    Log('VC Redist Version check : found ' + Version);
    Log('VC Redist Version check : expected ' + ExpectedVersion);
    Result := (CompareStr(Version, ExpectedVersion)<0);
  end
  else
  begin
    // Not even an old version installed
    Result := True;
  end;
  if (Result) then
  begin
    ExtractTemporaryFile('vc_redist.{#Arch}.exe');
  end;
end;

function isWinlibsIncluded: Boolean;
begin
  if (CompareStr({#Winlibs}, 'true')) then Result := True;
  else Result := False;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
    if CurStep = ssPostInstall and isWinlibsIncluded then
    EnvAddPath(ExpandConstant('{app}') +'\mingw64');
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
    if CurUninstallStep = usPostUninstall and isWinlibsIncluded then
    EnvRemovePath(ExpandConstant('{app}') +'\mingw64');
end;
